<?xml version="1.0" encoding="UTF-8"?>
<!--

       Copyright 2009-2016 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.akanemurakawa.kaguya.dao.mapper.UserMapper">
  <!-- author: HanaeYuuma -->
  <resultMap id="WithFriendResultMap" type="com.hanaeyuuma.freeblogs.model.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_username" jdbcType="VARCHAR" property="userUsername" />
    <result column="user_password" jdbcType="CHAR" property="userPassword" />
    <result column="user_email" jdbcType="VARCHAR" property="userEmail" />
    <result column="user_sex" jdbcType="CHAR" property="userSex"/>
    <result column="user_avatar" jdbcType="VARCHAR" property="userAvatar" />
    <result column="user_description" jdbcType="VARCHAR" property="userDescription" />
    <result column="user_github" jdbcType="VARCHAR" property="userGithub" />
    <result column="user_twitter" jdbcType="VARCHAR" property="userTwitter" />
    <result column="user_weibo" jdbcType="VARCHAR" property="userWeibo" />
    <!-- 一对多关联查询 -->
    <collection property="userFriend" ofType="com.hanaeyuuma.freeblogs.model.Friend">
    	<!-- author: HanaeYuuma -->
    	<!-- 这里的column对应的是查询的别名而不是表的字段 -->
	    <id column="f_id" jdbcType="INTEGER" property="id" />
	    <result column="f_user_id" jdbcType="INTEGER" property="userId" />
	    <result column="f_friend_name" jdbcType="VARCHAR" property="friendName" />
	    <result column="f_friend_link" jdbcType="VARCHAR" property="friendLink" />
    </collection>
  </resultMap>
  
  <resultMap id="BaseResultMap" type="com.hanaeyuuma.freeblogs.model.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_username" jdbcType="VARCHAR" property="userUsername" />
    <result column="user_password" jdbcType="CHAR" property="userPassword" />
    <result column="user_email" jdbcType="VARCHAR" property="userEmail" />
    <result column="user_sex" jdbcType="CHAR" property="userSex"/>
    <result column="user_avatar" jdbcType="VARCHAR" property="userAvatar" />
    <result column="user_description" jdbcType="VARCHAR" property="userDescription" />
    <result column="user_github" jdbcType="VARCHAR" property="userGithub" />
    <result column="user_twitter" jdbcType="VARCHAR" property="userTwitter" />
    <result column="user_weibo" jdbcType="VARCHAR" property="userWeibo" />
  </resultMap>
  
  <!-- author: HanaeYuuma -->
  <sql id="With_Friend_Column_List">
    u.id, u.user_username, u.user_password, u.user_email, u.user_sex, u.user_avatar,
    u.user_description, u.user_github, u.user_twitter, u.user_weibo,
    f.id as f_id, f.user_id as f_user_id, f.friend_name as f_friend_name, f.friend_link as f_friend_link
  </sql>
  
  <sql id="Base_Column_List">
    id, user_username, user_password, user_email, user_sex, user_avatar,
    user_description, user_github, user_twitter, user_weibo
  </sql>
  
  <!-- author: HanaeYuuma -->
  <!-- 查询所有用户基本信息 -->
  <select id="selectAllUserInfo" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from freeblogs_user order by id desc
  </select>
  
  <!-- author: HanaeYuuma -->
  <!-- 通过id查询用户信息 -->
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="WithFriendResultMap">
    select 
    <include refid="With_Friend_Column_List" />
    from freeblogs_user u, freeblogs_friend f
    where u.id = #{id,jdbcType=INTEGER} and u.id = f.user_id
  </select>
  
  <!-- author: HanaeYuuma -->
  <!-- 一对多查询，一个用户对应多个友情链接。 -->
  <select id="selectByPrimaryKeyWithFriend" parameterType="java.lang.Integer" resultMap="WithFriendResultMap">
    select 
    <include refid="With_Friend_Column_List" />
    from freeblogs_user u, freeblogs_friend f
    where u.id = #{id,jdbcType=INTEGER} and u.id = f.user_id
  </select>
    
  <!-- author: HanaeYuuma -->
  <!-- 验证用户的登录，通过邮箱和密码查询 -->
  <select id="selectByEmailAndPassword" parameterType="com.hanaeyuuma.freeblogs.model.User" resultMap="WithFriendResultMap"> 
    select
    <include refid="With_Friend_Column_List" />
    from freeblogs_user u, freeblogs_friend f
    where u.user_email = #{userEmail,jdbcType=VARCHAR} and u.user_password = #{userPassword,jdbcType=CHAR}
    and u.id = f.user_id
  </select>
  
  <!-- author: HanaeYuuma -->
  <!-- 如果用户保存有本站的登录cookie，则进行密码验证。验证用户的登录，通过密码查询 -->
  <select id="selectByPassword" parameterType="com.hanaeyuuma.freeblogs.model.User" resultMap="WithFriendResultMap"> 
    select
    <include refid="With_Friend_Column_List" />
    from freeblogs_user u, freeblogs_friend f
    where u.user_password = #{userPassword,jdbcType=CHAR} and u.id = f.user_id
  </select>
    
  <!-- author: HanaeYuuma -->
  <!-- 通过密码查询用户id -->
  <select id="selectIdByPassword" parameterType="com.hanaeyuuma.freeblogs.model.User" resultType="java.lang.Integer"> 
    select id from freeblogs_user 
    where id = #{id,jdbcType=INTEGER} and user_password = #{userPassword,jdbcType=CHAR}
  </select>
    
  <!-- author: HanaeYuuma -->
  <!-- 修改账户的密码，通过id -->
  <update id="updatePasswordByPrimaryKey" parameterType="com.hanaeyuuma.freeblogs.model.User">
    update freeblogs_user
    set user_password = #{userPassword,jdbcType=CHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!-- author: HanaeYuuma -->
  <!-- 修改头像 -->
  <update id="updateAvatar" parameterType="com.hanaeyuuma.freeblogs.model.User">
    update freeblogs_user
    set user_avatar = #{userAvatar,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update> 
    
  <!-- author: HanaeYuuma -->
  <!-- 修改资料 -->
    <update id="updateInfoByPrimaryKeySelective" parameterType="com.hanaeyuuma.freeblogs.model.User">
    update freeblogs_user
    <set>
      <if test="userUsername != null and userUsername != ''">
        user_username = #{userUsername,jdbcType=VARCHAR},
      </if>
      <if test="userAvatar != null and userAvatar != ''">
        user_avatar = #{userAvatar,jdbcType=VARCHAR},
      </if>
      <if test="userDescription != null and userDescription != ''">
        user_description = #{userDescription,jdbcType=VARCHAR},
      </if>
      <if test="userGithub != null and userGithub != ''">
        user_github = #{userGithub,jdbcType=VARCHAR},
      </if>
      <if test="userTwitter != null and userTwitter != ''">
        user_twitter = #{userTwitter,jdbcType=VARCHAR},
      </if>
      <if test="userWeibo != null and userWeibo != ''">
        user_weibo = #{userWeibo,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
    
  <!-- author: HanaeYuuma -->
  <!-- 验证用户名是否存在 -->
  <select id="selectExistUserByUserName" parameterType="com.hanaeyuuma.freeblogs.model.User" resultType="java.lang.Integer"> 
    select id from freeblogs_user 
    where user_username = #{userUsername,jdbcType=VARCHAR}
  </select>
  
  <!-- author: HanaeYuuma -->
  <!-- 验证用户邮箱是否存在 -->
  <select id="selectExistUserByUserEmail" parameterType="com.hanaeyuuma.freeblogs.model.User" resultType="java.lang.Integer"> 
    select id from freeblogs_user 
    where user_email = #{userEmail,jdbcType=VARCHAR}
  </select>
  
  <!-- author: HanaeYuuma -->
  <!-- 修改账户的密码，通过邮箱，用户找回密码的时候需要 -->
  <update id="updatePasswordByEmail" parameterType="com.hanaeyuuma.freeblogs.model.User">
    update freeblogs_user
    set user_password = #{userPassword,jdbcType=CHAR}
    where user_email = #{userEmail,jdbcType=VARCHAR}
  </update>
  
  <!-- author: HanaeYuuma -->
  <!-- 批处理查找用户 -->
  <select id="batchSelect" parameterType="java.util.List" resultMap="BaseResultMap">
    select id, user_username, user_avatar, user_sex
    from freeblogs_user
    where id in
     <foreach collection="list" item="item" open="(" separator="," close=")">
    	#{item}
    </foreach>
  </select>
  
  <!-- author: HanaeYuuma -->
  <!-- 注册用户 -->  
  <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="com.hanaeyuuma.freeblogs.model.User">
    insert into freeblogs_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userUsername != null">
        user_username,
      </if>
      <if test="userPassword != null">
        user_password,
      </if>
      <if test="userEmail != null">
        user_email,
      </if>
      <if test="userSex != null">
        user_sex,
      </if>
      <if test="userAvatar != null">
        user_avatar,
      </if>
      <if test="userDescription != null">
        user_description,
      </if>
      <if test="userGithub != null">
        user_github,
      </if>
      <if test="userTwitter != null">
        user_twitter,
      </if>
      <if test="userWeibo != null">
        user_weibo,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userUsername != null">
        #{userUsername,jdbcType=VARCHAR},
      </if>
      <if test="userPassword != null">
        #{userPassword,jdbcType=CHAR},
      </if>
      <if test="userEmail != null">
        #{userEmail,jdbcType=VARCHAR},
      </if>
      <if test="userSex != null">
        #{userSex,jdbcType=CHAR},
      </if>
      <if test="userAvatar != null">
        #{userAvatar,jdbcType=VARCHAR},
      </if>
      <if test="userDescription != null">
        #{userDescription,jdbcType=VARCHAR},
      </if>
      <if test="userGithub != null">
        #{userGithub,jdbcType=VARCHAR},
      </if>
      <if test="userTwitter != null">
        #{userTwitter,jdbcType=VARCHAR},
      </if>
      <if test="userWeibo != null">
        #{userWeibo,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  
  <!-- author: HanaeYuuma -->
  <!-- 批量插入用户 -->
  <insert id="batchInsert" useGeneratedKeys="true" keyProperty="id" parameterType="java.util.List">
    insert into freeblogs_user(user_username, user_password, user_email,user_sex)
    values
    <foreach collection="list" item="item" separator=",">
    	(#{item.userUsername,jdbcType=VARCHAR}, #{item.userPassword,jdbcType=CHAR},
    	 #{item.userEmail,jdbcType=VARCHAR}, #{item.userSex,jdbcType=CHAR})
    </foreach>
  </insert>
  
  <!-- author: HanaeYuuma -->
  <!-- 删除用户 -->
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from freeblogs_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  
  <!-- author: HanaeYuuma -->
  <!-- 批量删除用户 -->
  <delete id="batchDelete" parameterType="java.util.List">
    delete from freeblogs_user
    where id in
    <foreach collection="list" item="item" open="(" separator="," close=")">
    	#{item}
    </foreach>
  </delete>
  
  <!-- author: HanaeYuuma -->
  <!-- 模糊搜索用户 -->
  <select id="selectUserInfo" parameterType="com.hanaeyuuma.freeblogs.model.User" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from freeblogs_user
    where user_username like CONCAT(CONCAT('%',  #{userUsername,jdbcType=VARCHAR}), '%')
    and user_email like CONCAT(CONCAT('%',  #{userEmail,jdbcType=VARCHAR}), '%')
    and user_sex like CONCAT(CONCAT('%',  #{userSex,jdbcType=CHAR}), '%')
  </select>  
   <!-- 以下待使用 -->

  <insert id="insert" parameterType="com.hanaeyuuma.freeblogs.model.User">
    insert into freeblogs_user (id, user_username, user_password, 
      user_email, user_avatar, user_description, 
      user_github, user_twitter, user_weibo
      )
    values (#{id,jdbcType=INTEGER}, #{userUsername,jdbcType=VARCHAR}, #{userPassword,jdbcType=CHAR}, 
      #{userEmail,jdbcType=VARCHAR}, #{userAvatar,jdbcType=VARCHAR}, #{userDescription,jdbcType=VARCHAR}, 
      #{userGithub,jdbcType=VARCHAR}, #{userTwitter,jdbcType=VARCHAR}, #{userWeibo,jdbcType=VARCHAR}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.hanaeyuuma.freeblogs.model.User">
    update freeblogs_user
    set user_username = #{userUsername,jdbcType=VARCHAR},
      user_password = #{userPassword,jdbcType=CHAR},
      user_email = #{userEmail,jdbcType=VARCHAR},
      user_avatar = #{userAvatar,jdbcType=VARCHAR},
      user_description = #{userDescription,jdbcType=VARCHAR},
      user_github = #{userGithub,jdbcType=VARCHAR},
      user_twitter = #{userTwitter,jdbcType=VARCHAR},
      user_weibo = #{userWeibo,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>